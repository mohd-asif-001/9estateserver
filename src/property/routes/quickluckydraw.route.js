const express = require("express");const createError = require("http-errors");const router = express.Router();const Luckydraw = require("../../models/quick-lucky-draw");//get Categoriesrouter.get('/luckydraws', async (req, res, next) => {  try {    const data = await Luckydraw.find()    const total_qluckydraws= await Luckydraw.countDocuments();    res.send({      total: total_qluckydraws,      qluckydraws: data,    });  }  catch (error) {    next(error)  }})router.get('/luckydrawdataExport', async (req, res, next) => {  try {    const data = await Luckydraw.find({trash:0}).select("name email mobile agentId property_com -_id");    const total_luckydraw = await Luckydraw.countDocuments({trash:0});    res.send({      total: total_luckydraw,      data: data,    });  }  catch (error) {    next(error)  }});router.get("/getmyqluckydrawssearch", async (req, res, next) => {  try {    const limit = parseInt(req.query.limit);    const offset = parseInt(req.query.offset);    const search = String(req.query.searchdata);    const skips = limit * offset;       var sortObject = {};    var sort_col = String(req.query.sort_col);    var sort_order = String(req.query.sort_order);    sortObject[sort_col] = sort_order;    if (search) {      const colName = search;      const qluckydrawsCollection = await Luckydraw.find({        $or: [          { name: { $regex: new RegExp("^" + colName.toLowerCase(), "i") } },        ],      })        .skip(skips)        .limit(limit)        .sort(sortObject);      const total_pages = await Luckydraw.countDocuments({        $or: [          { name: { $regex: new RegExp("^" + colName.toLowerCase(), "i") } }        ],      });      res.send({        total: total_pages,        data: qluckydrawsCollection,      });    } else {      const qluckydrawsCollection = await Luckydraw.find()        .skip(skips)        .limit(limit)        .sort(sortObject);      const total_pages = await Luckydraw.countDocuments();      res.send({        total: total_pages,        data: qluckydrawsCollection,      });    }  } catch (error) {    next(error);  }});//get Categories by IDrouter.get('/luckydraws/:id', async (req, res, next) => {  try {    const data = await Luckydraw.find({_id:req.params.id})    res.send({ data: data })  }  catch (error) {    next(error)  }})//Create Categoryrouter.post("/luckydraws", async (req, res, next) => {  try {    console.log(req.body);    const {        name,        mobile,        email,        property_com,        agentId    } = req.body;        const qluckydraws = new Luckydraw({        name,        mobile,        email,        property_com,        agentId    });    const addqluckydraws= await qluckydraws.save();    res.send(addqluckydraws);  } catch (error) {    next(error);  }});//Update Categoryrouter.patch("/luckydraws/:id", async (req, res, next) => {  try {    const update = req.body;    const id = req.params.id;    const option = { new: true };    const updatedDetails = await Luckydraw.findByIdAndUpdate(id, update, option);    res.send(updatedDetails);  } catch (error) {    next(error);  }});//Delete Categoryrouter.delete("/luckydraws/:id", async (req, res, next) => {  try {    const id = req.params.id;    const find = await Luckydraw.findOne({ _id: id });    if (find) {      const deleted = await Luckydraw.findByIdAndDelete({ _id: id });      res.send(deleted);    } else {      res.send("Id does not exist");    }  } catch (error) {   next(error)  }});module.exports = router;